apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/name: kubeblocks
  name: rollouts.apps.kubeblocks.io
spec:
  group: apps.kubeblocks.io
  names:
    categories:
    - kubeblocks
    kind: Rollout
    listKind: RolloutList
    plural: rollouts
    singular: rollout
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Rollout is the Schema for the rollouts API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: RolloutSpec defines the desired state of Rollout
            properties:
              clusterName:
                maxLength: 64
                type: string
              components:
                items:
                  properties:
                    compDef:
                      description: Specifies the target ComponentDefinition of the
                        component.
                      maxLength: 64
                      type: string
                    metadata:
                      properties:
                        preview:
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                          type: object
                        stable:
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                          type: object
                      type: object
                    name:
                      maxLength: 22
                      pattern: ^[a-z]([a-z0-9\-]*[a-z0-9])?$
                      type: string
                    promotion:
                      properties:
                        auto:
                          type: boolean
                        condition:
                          properties:
                            post:
                              description: |-
                                Action defines a customizable hook or procedure tailored for different database engines,
                                designed to be invoked at predetermined points within the lifecycle of a Component instance.
                                It provides a modular and extensible way to customize a Component's behavior through the execution of defined actions.


                                Available Action triggers include:


                                  - `postProvision`: Defines the hook to be executed after the creation of a Component,
                                    with `preCondition` specifying when the action should be fired relative to the Component's lifecycle stages:
                                    `Immediately`, `RuntimeReady`, `ComponentReady`, and `ClusterReady`.
                                  - `preTerminate`: Defines the hook to be executed before terminating a Component.
                                  - `roleProbe`: Defines the procedure which is invoked regularly to assess the role of replicas.
                                  - `switchover`: Defines the procedure for a controlled transition of a role to a new replica.
                                  - `memberJoin`: Defines the procedure to add a new replica to the replication group.
                                  - `memberLeave`: Defines the method to remove a replica from the replication group.
                                  - `readOnly`: Defines the procedure to switch a replica into the read-only state.
                                  - `readWrite`: Defines the procedure to transition a replica from the read-only state back to the read-write state.
                                  - `dataDump`: Defines the procedure to export the data from a replica.
                                  - `dataLoad`: Defines the procedure to import data into a replica.
                                  - `reconfigure`: Defines the procedure that update a replica with new configuration.
                                  - `accountProvision`: Defines the procedure to generate a new database account.


                                Actions can be executed in different ways:


                                  - ExecAction: Executes a command inside a container.
                                    A set of predefined environment variables are available and can be leveraged within the `exec.command`
                                    to access context information such as details about pods, components, the overall cluster state,
                                    or database connection credentials.
                                    These variables provide a dynamic and context-aware mechanism for script execution.
                                  - HTTPAction: Performs an HTTP request.
                                    HTTPAction is to be implemented in future version.
                                  - GRPCAction: In future version, Actions will support initiating gRPC calls.
                                    This allows developers to implement Actions using plugins written in programming language like Go,
                                    providing greater flexibility and extensibility.


                                An action is considered successful on returning 0, or HTTP 200 for status HTTP(s) Actions.
                                Any other return value or HTTP status codes indicate failure,
                                and the action may be retried based on the configured retry policy.


                                  - If an action exceeds the specified timeout duration, it will be terminated, and the action is considered failed.
                                  - If an action produces any data as output, it should be written to stdout,
                                    or included in the HTTP response payload for HTTP(s) actions.
                                  - If an action encounters any errors, error messages should be written to stderr,
                                    or detailed in the HTTP response with the appropriate non-200 status code.
                              properties:
                                exec:
                                  description: |-
                                    Defines the command to run.


                                    This field cannot be updated.
                                  properties:
                                    args:
                                      description: Args represents the arguments that
                                        are passed to the `command` for execution.
                                      items:
                                        type: string
                                      type: array
                                    command:
                                      description: |-
                                        Specifies the command to be executed inside the container.
                                        The working directory for this command is the container's root directory('/').
                                        Commands are executed directly without a shell environment, meaning shell-specific syntax ('|', etc.) is not supported.
                                        If the shell is required, it must be explicitly invoked in the command.


                                        A successful execution is indicated by an exit status of 0; any non-zero status signifies a failure.
                                      items:
                                        type: string
                                      type: array
                                    container:
                                      description: |-
                                        Specifies the name of the container within the same pod whose resources will be shared with the action.
                                        This allows the action to utilize the specified container's resources without executing within it.


                                        The name must match one of the containers defined in `componentDefinition.spec.runtime`.


                                        The resources that can be shared are included:


                                        - volume mounts


                                        This field cannot be updated.
                                      type: string
                                    env:
                                      description: |-
                                        Represents a list of environment variables that will be injected into the container.
                                        These variables enable the container to adapt its behavior based on the environment it's running in.


                                        This field cannot be updated.
                                      items:
                                        description: EnvVar represents an environment
                                          variable present in a Container.
                                        properties:
                                          name:
                                            description: Name of the environment variable.
                                              Must be a C_IDENTIFIER.
                                            type: string
                                          value:
                                            description: |-
                                              Variable references $(VAR_NAME) are expanded
                                              using the previously defined environment variables in the container and
                                              any service environment variables. If a variable cannot be resolved,
                                              the reference in the input string will be unchanged. Double $$ are reduced
                                              to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
                                              "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
                                              Escaped references will never be expanded, regardless of whether the variable
                                              exists or not.
                                              Defaults to "".
                                            type: string
                                          valueFrom:
                                            description: Source for the environment
                                              variable's value. Cannot be used if
                                              value is not empty.
                                            properties:
                                              configMapKeyRef:
                                                description: Selects a key of a ConfigMap.
                                                properties:
                                                  key:
                                                    description: The key to select.
                                                    type: string
                                                  name:
                                                    description: |-
                                                      Name of the referent.
                                                      More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                                      TODO: Add other useful fields. apiVersion, kind, uid?
                                                    type: string
                                                  optional:
                                                    description: Specify whether the
                                                      ConfigMap or its key must be
                                                      defined
                                                    type: boolean
                                                required:
                                                - key
                                                type: object
                                                x-kubernetes-map-type: atomic
                                              fieldRef:
                                                description: |-
                                                  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
                                                  spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                                                properties:
                                                  apiVersion:
                                                    description: Version of the schema
                                                      the FieldPath is written in
                                                      terms of, defaults to "v1".
                                                    type: string
                                                  fieldPath:
                                                    description: Path of the field
                                                      to select in the specified API
                                                      version.
                                                    type: string
                                                required:
                                                - fieldPath
                                                type: object
                                                x-kubernetes-map-type: atomic
                                              resourceFieldRef:
                                                description: |-
                                                  Selects a resource of the container: only resources limits and requests
                                                  (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                                                properties:
                                                  containerName:
                                                    description: 'Container name:
                                                      required for volumes, optional
                                                      for env vars'
                                                    type: string
                                                  divisor:
                                                    anyOf:
                                                    - type: integer
                                                    - type: string
                                                    description: Specifies the output
                                                      format of the exposed resources,
                                                      defaults to "1"
                                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                    x-kubernetes-int-or-string: true
                                                  resource:
                                                    description: 'Required: resource
                                                      to select'
                                                    type: string
                                                required:
                                                - resource
                                                type: object
                                                x-kubernetes-map-type: atomic
                                              secretKeyRef:
                                                description: Selects a key of a secret
                                                  in the pod's namespace
                                                properties:
                                                  key:
                                                    description: The key of the secret
                                                      to select from.  Must be a valid
                                                      secret key.
                                                    type: string
                                                  name:
                                                    description: |-
                                                      Name of the referent.
                                                      More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                                      TODO: Add other useful fields. apiVersion, kind, uid?
                                                    type: string
                                                  optional:
                                                    description: Specify whether the
                                                      Secret or its key must be defined
                                                    type: boolean
                                                required:
                                                - key
                                                type: object
                                                x-kubernetes-map-type: atomic
                                            type: object
                                        required:
                                        - name
                                        type: object
                                      type: array
                                    image:
                                      description: |-
                                        Specifies the container image to be used for running the Action.


                                        When specified, a dedicated container will be created using this image to execute the Action.
                                        All actions with same image will share the same container.


                                        This field cannot be updated.
                                      type: string
                                    matchingKey:
                                      description: |-
                                        Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.
                                        The impact of this field depends on the `targetPodSelector` value:


                                        - When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.
                                        - When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`
                                          will be selected for the Action.


                                        This field cannot be updated.
                                      type: string
                                    targetPodSelector:
                                      description: |-
                                        Defines the criteria used to select the target Pod(s) for executing the Action.
                                        This is useful when there is no default target replica identified.
                                        It allows for precise control over which Pod(s) the Action should run in.


                                        If not specified, the Action will be executed in the pod where the Action is triggered, such as the pod
                                        to be removed or added; or a random pod if the Action is triggered at the component level, such as
                                        post-provision or pre-terminate of the component.


                                        This field cannot be updated.
                                      enum:
                                      - Any
                                      - All
                                      - Role
                                      - Ordinal
                                      type: string
                                  type: object
                                preCondition:
                                  description: |-
                                    Specifies the state that the cluster must reach before the Action is executed.
                                    Currently, this is only applicable to the `postProvision` action.


                                    The conditions are as follows:


                                    - `Immediately`: Executed right after the Component object is created.
                                      The readiness of the Component and its resources is not guaranteed at this stage.
                                    - `RuntimeReady`: The Action is triggered after the Component object has been created and all associated
                                      runtime resources (e.g. Pods) are in a ready state.
                                    - `ComponentReady`: The Action is triggered after the Component itself is in a ready state.
                                      This process does not affect the readiness state of the Component or the Cluster.
                                    - `ClusterReady`: The Action is executed after the Cluster is in a ready state.
                                      This execution does not alter the Component or the Cluster's state of readiness.


                                    This field cannot be updated.
                                  type: string
                                retryPolicy:
                                  description: |-
                                    Defines the strategy to be taken when retrying the Action after a failure.


                                    It specifies the conditions under which the Action should be retried and the limits to apply,
                                    such as the maximum number of retries and backoff strategy.


                                    This field cannot be updated.
                                  properties:
                                    maxRetries:
                                      default: 0
                                      description: |-
                                        Defines the maximum number of retry attempts that should be made for a given Action.
                                        This value is set to 0 by default, indicating that no retries will be made.
                                      type: integer
                                    retryInterval:
                                      default: 0
                                      description: |-
                                        Indicates the duration of time to wait between each retry attempt.
                                        This value is set to 0 by default, indicating that there will be no delay between retry attempts.
                                      format: int64
                                      type: integer
                                  type: object
                                timeoutSeconds:
                                  default: 0
                                  description: |-
                                    Specifies the maximum duration in seconds that the Action is allowed to run.


                                    If the Action does not complete within this time frame, it will be terminated.


                                    This field cannot be updated.
                                  format: int32
                                  type: integer
                              type: object
                            prev:
                              description: |-
                                Action defines a customizable hook or procedure tailored for different database engines,
                                designed to be invoked at predetermined points within the lifecycle of a Component instance.
                                It provides a modular and extensible way to customize a Component's behavior through the execution of defined actions.


                                Available Action triggers include:


                                  - `postProvision`: Defines the hook to be executed after the creation of a Component,
                                    with `preCondition` specifying when the action should be fired relative to the Component's lifecycle stages:
                                    `Immediately`, `RuntimeReady`, `ComponentReady`, and `ClusterReady`.
                                  - `preTerminate`: Defines the hook to be executed before terminating a Component.
                                  - `roleProbe`: Defines the procedure which is invoked regularly to assess the role of replicas.
                                  - `switchover`: Defines the procedure for a controlled transition of a role to a new replica.
                                  - `memberJoin`: Defines the procedure to add a new replica to the replication group.
                                  - `memberLeave`: Defines the method to remove a replica from the replication group.
                                  - `readOnly`: Defines the procedure to switch a replica into the read-only state.
                                  - `readWrite`: Defines the procedure to transition a replica from the read-only state back to the read-write state.
                                  - `dataDump`: Defines the procedure to export the data from a replica.
                                  - `dataLoad`: Defines the procedure to import data into a replica.
                                  - `reconfigure`: Defines the procedure that update a replica with new configuration.
                                  - `accountProvision`: Defines the procedure to generate a new database account.


                                Actions can be executed in different ways:


                                  - ExecAction: Executes a command inside a container.
                                    A set of predefined environment variables are available and can be leveraged within the `exec.command`
                                    to access context information such as details about pods, components, the overall cluster state,
                                    or database connection credentials.
                                    These variables provide a dynamic and context-aware mechanism for script execution.
                                  - HTTPAction: Performs an HTTP request.
                                    HTTPAction is to be implemented in future version.
                                  - GRPCAction: In future version, Actions will support initiating gRPC calls.
                                    This allows developers to implement Actions using plugins written in programming language like Go,
                                    providing greater flexibility and extensibility.


                                An action is considered successful on returning 0, or HTTP 200 for status HTTP(s) Actions.
                                Any other return value or HTTP status codes indicate failure,
                                and the action may be retried based on the configured retry policy.


                                  - If an action exceeds the specified timeout duration, it will be terminated, and the action is considered failed.
                                  - If an action produces any data as output, it should be written to stdout,
                                    or included in the HTTP response payload for HTTP(s) actions.
                                  - If an action encounters any errors, error messages should be written to stderr,
                                    or detailed in the HTTP response with the appropriate non-200 status code.
                              properties:
                                exec:
                                  description: |-
                                    Defines the command to run.


                                    This field cannot be updated.
                                  properties:
                                    args:
                                      description: Args represents the arguments that
                                        are passed to the `command` for execution.
                                      items:
                                        type: string
                                      type: array
                                    command:
                                      description: |-
                                        Specifies the command to be executed inside the container.
                                        The working directory for this command is the container's root directory('/').
                                        Commands are executed directly without a shell environment, meaning shell-specific syntax ('|', etc.) is not supported.
                                        If the shell is required, it must be explicitly invoked in the command.


                                        A successful execution is indicated by an exit status of 0; any non-zero status signifies a failure.
                                      items:
                                        type: string
                                      type: array
                                    container:
                                      description: |-
                                        Specifies the name of the container within the same pod whose resources will be shared with the action.
                                        This allows the action to utilize the specified container's resources without executing within it.


                                        The name must match one of the containers defined in `componentDefinition.spec.runtime`.


                                        The resources that can be shared are included:


                                        - volume mounts


                                        This field cannot be updated.
                                      type: string
                                    env:
                                      description: |-
                                        Represents a list of environment variables that will be injected into the container.
                                        These variables enable the container to adapt its behavior based on the environment it's running in.


                                        This field cannot be updated.
                                      items:
                                        description: EnvVar represents an environment
                                          variable present in a Container.
                                        properties:
                                          name:
                                            description: Name of the environment variable.
                                              Must be a C_IDENTIFIER.
                                            type: string
                                          value:
                                            description: |-
                                              Variable references $(VAR_NAME) are expanded
                                              using the previously defined environment variables in the container and
                                              any service environment variables. If a variable cannot be resolved,
                                              the reference in the input string will be unchanged. Double $$ are reduced
                                              to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
                                              "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
                                              Escaped references will never be expanded, regardless of whether the variable
                                              exists or not.
                                              Defaults to "".
                                            type: string
                                          valueFrom:
                                            description: Source for the environment
                                              variable's value. Cannot be used if
                                              value is not empty.
                                            properties:
                                              configMapKeyRef:
                                                description: Selects a key of a ConfigMap.
                                                properties:
                                                  key:
                                                    description: The key to select.
                                                    type: string
                                                  name:
                                                    description: |-
                                                      Name of the referent.
                                                      More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                                      TODO: Add other useful fields. apiVersion, kind, uid?
                                                    type: string
                                                  optional:
                                                    description: Specify whether the
                                                      ConfigMap or its key must be
                                                      defined
                                                    type: boolean
                                                required:
                                                - key
                                                type: object
                                                x-kubernetes-map-type: atomic
                                              fieldRef:
                                                description: |-
                                                  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
                                                  spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                                                properties:
                                                  apiVersion:
                                                    description: Version of the schema
                                                      the FieldPath is written in
                                                      terms of, defaults to "v1".
                                                    type: string
                                                  fieldPath:
                                                    description: Path of the field
                                                      to select in the specified API
                                                      version.
                                                    type: string
                                                required:
                                                - fieldPath
                                                type: object
                                                x-kubernetes-map-type: atomic
                                              resourceFieldRef:
                                                description: |-
                                                  Selects a resource of the container: only resources limits and requests
                                                  (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                                                properties:
                                                  containerName:
                                                    description: 'Container name:
                                                      required for volumes, optional
                                                      for env vars'
                                                    type: string
                                                  divisor:
                                                    anyOf:
                                                    - type: integer
                                                    - type: string
                                                    description: Specifies the output
                                                      format of the exposed resources,
                                                      defaults to "1"
                                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                    x-kubernetes-int-or-string: true
                                                  resource:
                                                    description: 'Required: resource
                                                      to select'
                                                    type: string
                                                required:
                                                - resource
                                                type: object
                                                x-kubernetes-map-type: atomic
                                              secretKeyRef:
                                                description: Selects a key of a secret
                                                  in the pod's namespace
                                                properties:
                                                  key:
                                                    description: The key of the secret
                                                      to select from.  Must be a valid
                                                      secret key.
                                                    type: string
                                                  name:
                                                    description: |-
                                                      Name of the referent.
                                                      More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                                      TODO: Add other useful fields. apiVersion, kind, uid?
                                                    type: string
                                                  optional:
                                                    description: Specify whether the
                                                      Secret or its key must be defined
                                                    type: boolean
                                                required:
                                                - key
                                                type: object
                                                x-kubernetes-map-type: atomic
                                            type: object
                                        required:
                                        - name
                                        type: object
                                      type: array
                                    image:
                                      description: |-
                                        Specifies the container image to be used for running the Action.


                                        When specified, a dedicated container will be created using this image to execute the Action.
                                        All actions with same image will share the same container.


                                        This field cannot be updated.
                                      type: string
                                    matchingKey:
                                      description: |-
                                        Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.
                                        The impact of this field depends on the `targetPodSelector` value:


                                        - When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.
                                        - When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`
                                          will be selected for the Action.


                                        This field cannot be updated.
                                      type: string
                                    targetPodSelector:
                                      description: |-
                                        Defines the criteria used to select the target Pod(s) for executing the Action.
                                        This is useful when there is no default target replica identified.
                                        It allows for precise control over which Pod(s) the Action should run in.


                                        If not specified, the Action will be executed in the pod where the Action is triggered, such as the pod
                                        to be removed or added; or a random pod if the Action is triggered at the component level, such as
                                        post-provision or pre-terminate of the component.


                                        This field cannot be updated.
                                      enum:
                                      - Any
                                      - All
                                      - Role
                                      - Ordinal
                                      type: string
                                  type: object
                                preCondition:
                                  description: |-
                                    Specifies the state that the cluster must reach before the Action is executed.
                                    Currently, this is only applicable to the `postProvision` action.


                                    The conditions are as follows:


                                    - `Immediately`: Executed right after the Component object is created.
                                      The readiness of the Component and its resources is not guaranteed at this stage.
                                    - `RuntimeReady`: The Action is triggered after the Component object has been created and all associated
                                      runtime resources (e.g. Pods) are in a ready state.
                                    - `ComponentReady`: The Action is triggered after the Component itself is in a ready state.
                                      This process does not affect the readiness state of the Component or the Cluster.
                                    - `ClusterReady`: The Action is executed after the Cluster is in a ready state.
                                      This execution does not alter the Component or the Cluster's state of readiness.


                                    This field cannot be updated.
                                  type: string
                                retryPolicy:
                                  description: |-
                                    Defines the strategy to be taken when retrying the Action after a failure.


                                    It specifies the conditions under which the Action should be retried and the limits to apply,
                                    such as the maximum number of retries and backoff strategy.


                                    This field cannot be updated.
                                  properties:
                                    maxRetries:
                                      default: 0
                                      description: |-
                                        Defines the maximum number of retry attempts that should be made for a given Action.
                                        This value is set to 0 by default, indicating that no retries will be made.
                                      type: integer
                                    retryInterval:
                                      default: 0
                                      description: |-
                                        Indicates the duration of time to wait between each retry attempt.
                                        This value is set to 0 by default, indicating that there will be no delay between retry attempts.
                                      format: int64
                                      type: integer
                                  type: object
                                timeoutSeconds:
                                  default: 0
                                  description: |-
                                    Specifies the maximum duration in seconds that the Action is allowed to run.


                                    If the Action does not complete within this time frame, it will be terminated.


                                    This field cannot be updated.
                                  format: int32
                                  type: integer
                              type: object
                          type: object
                        delaySeconds:
                          default: 30
                          format: int32
                          type: integer
                        scaleDownDelaySeconds:
                          default: 30
                          format: int32
                          type: integer
                      type: object
                    replicas:
                      anyOf:
                      - type: integer
                      - type: string
                      x-kubernetes-int-or-string: true
                    serviceVersion:
                      description: Specifies the target ServiceVersion of the component.
                      maxLength: 32
                      type: string
                    services:
                      items:
                        description: |-
                          Service is a named abstraction of software service (for example, mysql) consisting of local port
                          (for example 3306) that the proxy listens on, and the selector that determines which pods
                          will answer requests sent through the proxy.
                        properties:
                          apiVersion:
                            description: |-
                              APIVersion defines the versioned schema of this representation of an object.
                              Servers should convert recognized schemas to the latest internal value, and
                              may reject unrecognized values.
                              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                            type: string
                          kind:
                            description: |-
                              Kind is a string value representing the REST resource this object represents.
                              Servers may infer this from the endpoint the client submits requests to.
                              Cannot be updated.
                              In CamelCase.
                              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                            type: string
                          metadata:
                            description: |-
                              Standard object's metadata.
                              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                            properties:
                              annotations:
                                additionalProperties:
                                  type: string
                                type: object
                              finalizers:
                                items:
                                  type: string
                                type: array
                              labels:
                                additionalProperties:
                                  type: string
                                type: object
                              name:
                                type: string
                              namespace:
                                type: string
                            type: object
                          spec:
                            description: |-
                              Spec defines the behavior of a service.
                              https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
                            properties:
                              allocateLoadBalancerNodePorts:
                                description: |-
                                  allocateLoadBalancerNodePorts defines if NodePorts will be automatically
                                  allocated for services with type LoadBalancer.  Default is "true". It
                                  may be set to "false" if the cluster load-balancer does not rely on
                                  NodePorts.  If the caller requests specific NodePorts (by specifying a
                                  value), those requests will be respected, regardless of this field.
                                  This field may only be set for services with type LoadBalancer and will
                                  be cleared if the type is changed to any other type.
                                type: boolean
                              clusterIP:
                                description: |-
                                  clusterIP is the IP address of the service and is usually assigned
                                  randomly. If an address is specified manually, is in-range (as per
                                  system configuration), and is not in use, it will be allocated to the
                                  service; otherwise creation of the service will fail. This field may not
                                  be changed through updates unless the type field is also being changed
                                  to ExternalName (which requires this field to be blank) or the type
                                  field is being changed from ExternalName (in which case this field may
                                  optionally be specified, as describe above).  Valid values are "None",
                                  empty string (""), or a valid IP address. Setting this to "None" makes a
                                  "headless service" (no virtual IP), which is useful when direct endpoint
                                  connections are preferred and proxying is not required.  Only applies to
                                  types ClusterIP, NodePort, and LoadBalancer. If this field is specified
                                  when creating a Service of type ExternalName, creation will fail. This
                                  field will be wiped when updating a Service to type ExternalName.
                                  More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                                type: string
                              clusterIPs:
                                description: |-
                                  ClusterIPs is a list of IP addresses assigned to this service, and are
                                  usually assigned randomly.  If an address is specified manually, is
                                  in-range (as per system configuration), and is not in use, it will be
                                  allocated to the service; otherwise creation of the service will fail.
                                  This field may not be changed through updates unless the type field is
                                  also being changed to ExternalName (which requires this field to be
                                  empty) or the type field is being changed from ExternalName (in which
                                  case this field may optionally be specified, as describe above).  Valid
                                  values are "None", empty string (""), or a valid IP address.  Setting
                                  this to "None" makes a "headless service" (no virtual IP), which is
                                  useful when direct endpoint connections are preferred and proxying is
                                  not required.  Only applies to types ClusterIP, NodePort, and
                                  LoadBalancer. If this field is specified when creating a Service of type
                                  ExternalName, creation will fail. This field will be wiped when updating
                                  a Service to type ExternalName.  If this field is not specified, it will
                                  be initialized from the clusterIP field.  If this field is specified,
                                  clients must ensure that clusterIPs[0] and clusterIP have the same
                                  value.


                                  This field may hold a maximum of two entries (dual-stack IPs, in either order).
                                  These IPs must correspond to the values of the ipFamilies field. Both
                                  clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
                                  More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              externalIPs:
                                description: |-
                                  externalIPs is a list of IP addresses for which nodes in the cluster
                                  will also accept traffic for this service.  These IPs are not managed by
                                  Kubernetes.  The user is responsible for ensuring that traffic arrives
                                  at a node with this IP.  A common example is external load-balancers
                                  that are not part of the Kubernetes system.
                                items:
                                  type: string
                                type: array
                              externalName:
                                description: |-
                                  externalName is the external reference that discovery mechanisms will
                                  return as an alias for this service (e.g. a DNS CNAME record). No
                                  proxying will be involved.  Must be a lowercase RFC-1123 hostname
                                  (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                                type: string
                              externalTrafficPolicy:
                                description: |-
                                  externalTrafficPolicy describes how nodes distribute service traffic they
                                  receive on one of the Service's "externally-facing" addresses (NodePorts,
                                  ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
                                  the service in a way that assumes that external load balancers will take care
                                  of balancing the service traffic between nodes, and so each node will deliver
                                  traffic only to the node-local endpoints of the service, without masquerading
                                  the client source IP. (Traffic mistakenly sent to a node with no endpoints will
                                  be dropped.) The default value, "Cluster", uses the standard behavior of
                                  routing to all endpoints evenly (possibly modified by topology and other
                                  features). Note that traffic sent to an External IP or LoadBalancer IP from
                                  within the cluster will always get "Cluster" semantics, but clients sending to
                                  a NodePort from within the cluster may need to take traffic policy into account
                                  when picking a node.
                                type: string
                              healthCheckNodePort:
                                description: |-
                                  healthCheckNodePort specifies the healthcheck nodePort for the service.
                                  This only applies when type is set to LoadBalancer and
                                  externalTrafficPolicy is set to Local. If a value is specified, is
                                  in-range, and is not in use, it will be used.  If not specified, a value
                                  will be automatically allocated.  External systems (e.g. load-balancers)
                                  can use this port to determine if a given node holds endpoints for this
                                  service or not.  If this field is specified when creating a Service
                                  which does not need it, creation will fail. This field will be wiped
                                  when updating a Service to no longer need it (e.g. changing type).
                                  This field cannot be updated once set.
                                format: int32
                                type: integer
                              internalTrafficPolicy:
                                description: |-
                                  InternalTrafficPolicy describes how nodes distribute service traffic they
                                  receive on the ClusterIP. If set to "Local", the proxy will assume that pods
                                  only want to talk to endpoints of the service on the same node as the pod,
                                  dropping the traffic if there are no local endpoints. The default value,
                                  "Cluster", uses the standard behavior of routing to all endpoints evenly
                                  (possibly modified by topology and other features).
                                type: string
                              ipFamilies:
                                description: |-
                                  IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
                                  service. This field is usually assigned automatically based on cluster
                                  configuration and the ipFamilyPolicy field. If this field is specified
                                  manually, the requested family is available in the cluster,
                                  and ipFamilyPolicy allows it, it will be used; otherwise creation of
                                  the service will fail. This field is conditionally mutable: it allows
                                  for adding or removing a secondary IP family, but it does not allow
                                  changing the primary IP family of the Service. Valid values are "IPv4"
                                  and "IPv6".  This field only applies to Services of types ClusterIP,
                                  NodePort, and LoadBalancer, and does apply to "headless" services.
                                  This field will be wiped when updating a Service to type ExternalName.


                                  This field may hold a maximum of two entries (dual-stack families, in
                                  either order).  These families must correspond to the values of the
                                  clusterIPs field, if specified. Both clusterIPs and ipFamilies are
                                  governed by the ipFamilyPolicy field.
                                items:
                                  description: |-
                                    IPFamily represents the IP Family (IPv4 or IPv6). This type is used
                                    to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              ipFamilyPolicy:
                                description: |-
                                  IPFamilyPolicy represents the dual-stack-ness requested or required by
                                  this Service. If there is no value provided, then this field will be set
                                  to SingleStack. Services can be "SingleStack" (a single IP family),
                                  "PreferDualStack" (two IP families on dual-stack configured clusters or
                                  a single IP family on single-stack clusters), or "RequireDualStack"
                                  (two IP families on dual-stack configured clusters, otherwise fail). The
                                  ipFamilies and clusterIPs fields depend on the value of this field. This
                                  field will be wiped when updating a service to type ExternalName.
                                type: string
                              loadBalancerClass:
                                description: |-
                                  loadBalancerClass is the class of the load balancer implementation this Service belongs to.
                                  If specified, the value of this field must be a label-style identifier, with an optional prefix,
                                  e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
                                  This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
                                  balancer implementation is used, today this is typically done through the cloud provider integration,
                                  but should apply for any default implementation. If set, it is assumed that a load balancer
                                  implementation is watching for Services with a matching class. Any default load balancer
                                  implementation (e.g. cloud providers) should ignore Services that set this field.
                                  This field can only be set when creating or updating a Service to type 'LoadBalancer'.
                                  Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                                type: string
                              loadBalancerIP:
                                description: |-
                                  Only applies to Service Type: LoadBalancer.
                                  This feature depends on whether the underlying cloud-provider supports specifying
                                  the loadBalancerIP when a load balancer is created.
                                  This field will be ignored if the cloud-provider does not support the feature.
                                  Deprecated: This field was under-specified and its meaning varies across implementations.
                                  Using it is non-portable and it may not support dual-stack.
                                  Users are encouraged to use implementation-specific annotations when available.
                                type: string
                              loadBalancerSourceRanges:
                                description: |-
                                  If specified and supported by the platform, this will restrict traffic through the cloud-provider
                                  load-balancer will be restricted to the specified client IPs. This field will be ignored if the
                                  cloud-provider does not support the feature."
                                  More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
                                items:
                                  type: string
                                type: array
                              ports:
                                description: |-
                                  The list of ports that are exposed by this service.
                                  More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                                items:
                                  description: ServicePort contains information on
                                    service's port.
                                  properties:
                                    appProtocol:
                                      description: |-
                                        The application protocol for this port.
                                        This is used as a hint for implementations to offer richer behavior for protocols that they understand.
                                        This field follows standard Kubernetes label syntax.
                                        Valid values are either:


                                        * Un-prefixed protocol names - reserved for IANA standard service names (as per
                                        RFC-6335 and https://www.iana.org/assignments/service-names).


                                        * Kubernetes-defined prefixed names:
                                          * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
                                          * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
                                          * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455


                                        * Other protocols should use implementation-defined prefixed names such as
                                        mycompany.com/my-custom-protocol.
                                      type: string
                                    name:
                                      description: |-
                                        The name of this port within the service. This must be a DNS_LABEL.
                                        All ports within a ServiceSpec must have unique names. When considering
                                        the endpoints for a Service, this must match the 'name' field in the
                                        EndpointPort.
                                        Optional if only one ServicePort is defined on this service.
                                      type: string
                                    nodePort:
                                      description: |-
                                        The port on each node on which this service is exposed when type is
                                        NodePort or LoadBalancer.  Usually assigned by the system. If a value is
                                        specified, in-range, and not in use it will be used, otherwise the
                                        operation will fail.  If not specified, a port will be allocated if this
                                        Service requires one.  If this field is specified when creating a
                                        Service which does not need it, creation will fail. This field will be
                                        wiped when updating a Service to no longer need it (e.g. changing type
                                        from NodePort to ClusterIP).
                                        More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                                      format: int32
                                      type: integer
                                    port:
                                      description: The port that will be exposed by
                                        this service.
                                      format: int32
                                      type: integer
                                    protocol:
                                      default: TCP
                                      description: |-
                                        The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
                                        Default is TCP.
                                      type: string
                                    targetPort:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: |-
                                        Number or name of the port to access on the pods targeted by the service.
                                        Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                        If this is a string, it will be looked up as a named port in the
                                        target Pod's container ports. If this is not specified, the value
                                        of the 'port' field is used (an identity map).
                                        This field is ignored for services with clusterIP=None, and should be
                                        omitted or set equal to the 'port' field.
                                        More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
                                      x-kubernetes-int-or-string: true
                                  required:
                                  - port
                                  type: object
                                type: array
                                x-kubernetes-list-map-keys:
                                - port
                                - protocol
                                x-kubernetes-list-type: map
                              publishNotReadyAddresses:
                                description: |-
                                  publishNotReadyAddresses indicates that any agent which deals with endpoints for this
                                  Service should disregard any indications of ready/not-ready.
                                  The primary use case for setting this field is for a StatefulSet's Headless Service to
                                  propagate SRV DNS records for its Pods for the purpose of peer discovery.
                                  The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
                                  Services interpret this to mean that all endpoints are considered "ready" even if the
                                  Pods themselves are not. Agents which consume only Kubernetes generated endpoints
                                  through the Endpoints or EndpointSlice resources can safely assume this behavior.
                                type: boolean
                              selector:
                                additionalProperties:
                                  type: string
                                description: |-
                                  Route service traffic to pods with label keys and values matching this
                                  selector. If empty or not present, the service is assumed to have an
                                  external process managing its endpoints, which Kubernetes will not
                                  modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
                                  Ignored if type is ExternalName.
                                  More info: https://kubernetes.io/docs/concepts/services-networking/service/
                                type: object
                                x-kubernetes-map-type: atomic
                              sessionAffinity:
                                description: |-
                                  Supports "ClientIP" and "None". Used to maintain session affinity.
                                  Enable client IP based session affinity.
                                  Must be ClientIP or None.
                                  Defaults to None.
                                  More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                                type: string
                              sessionAffinityConfig:
                                description: sessionAffinityConfig contains the configurations
                                  of session affinity.
                                properties:
                                  clientIP:
                                    description: clientIP contains the configurations
                                      of Client IP based session affinity.
                                    properties:
                                      timeoutSeconds:
                                        description: |-
                                          timeoutSeconds specifies the seconds of ClientIP type session sticky time.
                                          The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
                                          Default value is 10800(for 3 hours).
                                        format: int32
                                        type: integer
                                    type: object
                                type: object
                              type:
                                description: |-
                                  type determines how the Service is exposed. Defaults to ClusterIP. Valid
                                  options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
                                  "ClusterIP" allocates a cluster-internal IP address for load-balancing
                                  to endpoints. Endpoints are determined by the selector or if that is not
                                  specified, by manual construction of an Endpoints object or
                                  EndpointSlice objects. If clusterIP is "None", no virtual IP is
                                  allocated and the endpoints are published as a set of endpoints rather
                                  than a virtual IP.
                                  "NodePort" builds on ClusterIP and allocates a port on every node which
                                  routes to the same endpoints as the clusterIP.
                                  "LoadBalancer" builds on NodePort and creates an external load-balancer
                                  (if supported in the current cloud) which routes to the same endpoints
                                  as the clusterIP.
                                  "ExternalName" aliases this service to the specified externalName.
                                  Several other fields do not apply to ExternalName services.
                                  More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
                                type: string
                            type: object
                          status:
                            description: |-
                              Most recently observed status of the service.
                              Populated by the system.
                              Read-only.
                              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
                            properties:
                              conditions:
                                description: Current service state
                                items:
                                  description: "Condition contains details for one
                                    aspect of the current state of this API Resource.\n---\nThis
                                    struct is intended for direct use as an array
                                    at the field path .status.conditions.  For example,\n\n\n\ttype
                                    FooStatus struct{\n\t    // Represents the observations
                                    of a foo's current state.\n\t    // Known .status.conditions.type
                                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t
                                    \   // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t
                                    \   // +listType=map\n\t    // +listMapKey=type\n\t
                                    \   Conditions []metav1.Condition `json:\"conditions,omitempty\"
                                    patchStrategy:\"merge\" patchMergeKey:\"type\"
                                    protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                                    \   // other fields\n\t}"
                                  properties:
                                    lastTransitionTime:
                                      description: |-
                                        lastTransitionTime is the last time the condition transitioned from one status to another.
                                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                                      format: date-time
                                      type: string
                                    message:
                                      description: |-
                                        message is a human readable message indicating details about the transition.
                                        This may be an empty string.
                                      maxLength: 32768
                                      type: string
                                    observedGeneration:
                                      description: |-
                                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                                        with respect to the current state of the instance.
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    reason:
                                      description: |-
                                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                                        Producers of specific condition types may define expected values and meanings for this field,
                                        and whether the values are considered a guaranteed API.
                                        The value should be a CamelCase string.
                                        This field may not be empty.
                                      maxLength: 1024
                                      minLength: 1
                                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                                      type: string
                                    status:
                                      description: status of the condition, one of
                                        True, False, Unknown.
                                      enum:
                                      - "True"
                                      - "False"
                                      - Unknown
                                      type: string
                                    type:
                                      description: |-
                                        type of condition in CamelCase or in foo.example.com/CamelCase.
                                        ---
                                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                                        useful (see .node.status.conditions), the ability to deconflict is important.
                                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                                      maxLength: 316
                                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                      type: string
                                  required:
                                  - lastTransitionTime
                                  - message
                                  - reason
                                  - status
                                  - type
                                  type: object
                                type: array
                                x-kubernetes-list-map-keys:
                                - type
                                x-kubernetes-list-type: map
                              loadBalancer:
                                description: |-
                                  LoadBalancer contains the current status of the load-balancer,
                                  if one is present.
                                properties:
                                  ingress:
                                    description: |-
                                      Ingress is a list containing ingress points for the load-balancer.
                                      Traffic intended for the service should be sent to these ingress points.
                                    items:
                                      description: |-
                                        LoadBalancerIngress represents the status of a load-balancer ingress point:
                                        traffic intended for the service should be sent to an ingress point.
                                      properties:
                                        hostname:
                                          description: |-
                                            Hostname is set for load-balancer ingress points that are DNS based
                                            (typically AWS load-balancers)
                                          type: string
                                        ip:
                                          description: |-
                                            IP is set for load-balancer ingress points that are IP based
                                            (typically GCE or OpenStack load-balancers)
                                          type: string
                                        ipMode:
                                          description: |-
                                            IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified.
                                            Setting this to "VIP" indicates that traffic is delivered to the node with
                                            the destination set to the load-balancer's IP and port.
                                            Setting this to "Proxy" indicates that traffic is delivered to the node or pod with
                                            the destination set to the node's IP and node port or the pod's IP and port.
                                            Service implementations may use this information to adjust traffic routing.
                                          type: string
                                        ports:
                                          description: |-
                                            Ports is a list of records of service ports
                                            If used, every port defined in the service should have an entry in it
                                          items:
                                            properties:
                                              error:
                                                description: |-
                                                  Error is to record the problem with the service port
                                                  The format of the error shall comply with the following rules:
                                                  - built-in error values shall be specified in this file and those shall use
                                                    CamelCase names
                                                  - cloud provider specific error values must have names that comply with the
                                                    format foo.example.com/CamelCase.
                                                  ---
                                                  The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                                                maxLength: 316
                                                pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                                type: string
                                              port:
                                                description: Port is the port number
                                                  of the service port of which status
                                                  is recorded here
                                                format: int32
                                                type: integer
                                              protocol:
                                                default: TCP
                                                description: |-
                                                  Protocol is the protocol of the service port of which status is recorded here
                                                  The supported values are: "TCP", "UDP", "SCTP"
                                                type: string
                                            required:
                                            - port
                                            - protocol
                                            type: object
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      type: object
                                    type: array
                                type: object
                            type: object
                        type: object
                      type: array
                    strategy:
                      properties:
                        create:
                          properties:
                            podAntiAffinity:
                              description: Pod anti affinity is a group of inter pod
                                anti affinity scheduling rules.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: |-
                                    The scheduler will prefer to schedule pods to nodes that satisfy
                                    the anti-affinity expressions specified by this field, but it may choose
                                    a node that violates one or more of the expressions. The node that is
                                    most preferred is the one with the greatest sum of weights, i.e.
                                    for each node that meets all of the scheduling requirements (resource
                                    request, requiredDuringScheduling anti-affinity expressions, etc.),
                                    compute a sum by iterating through the elements of this field and adding
                                    "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
                                    node(s) with the highest sum are the most preferred.
                                  items:
                                    description: The weights of all of the matched
                                      WeightedPodAffinityTerm fields are added per-node
                                      to find the most preferred node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term,
                                          associated with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: |-
                                              A label query over a set of resources, in this case pods.
                                              If it's null, this PodAffinityTerm matches with no Pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a
                                                  list of label selector requirements.
                                                  The requirements are ANDed.
                                                items:
                                                  description: |-
                                                    A label selector requirement is a selector that contains values, a key, and an operator that
                                                    relates the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label
                                                        key that the selector applies
                                                        to.
                                                      type: string
                                                    operator:
                                                      description: |-
                                                        operator represents a key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: |-
                                                        values is an array of string values. If the operator is In or NotIn,
                                                        the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                        the values array must be empty. This array is replaced during a strategic
                                                        merge patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                  - key
                                                  - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: |-
                                                  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions, whose key field is "key", the
                                                  operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          matchLabelKeys:
                                            description: |-
                                              MatchLabelKeys is a set of pod label keys to select which pods will
                                              be taken into consideration. The keys are used to lookup values from the
                                              incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
                                              to select the group of existing pods which pods will be taken into consideration
                                              for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
                                              pod labels will be ignored. The default value is empty.
                                              The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
                                              Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
                                              This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                            items:
                                              type: string
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          mismatchLabelKeys:
                                            description: |-
                                              MismatchLabelKeys is a set of pod label keys to select which pods will
                                              be taken into consideration. The keys are used to lookup values from the
                                              incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
                                              to select the group of existing pods which pods will be taken into consideration
                                              for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
                                              pod labels will be ignored. The default value is empty.
                                              The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
                                              Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
                                              This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                            items:
                                              type: string
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          namespaceSelector:
                                            description: |-
                                              A label query over the set of namespaces that the term applies to.
                                              The term is applied to the union of the namespaces selected by this field
                                              and the ones listed in the namespaces field.
                                              null selector and null or empty namespaces list means "this pod's namespace".
                                              An empty selector ({}) matches all namespaces.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a
                                                  list of label selector requirements.
                                                  The requirements are ANDed.
                                                items:
                                                  description: |-
                                                    A label selector requirement is a selector that contains values, a key, and an operator that
                                                    relates the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label
                                                        key that the selector applies
                                                        to.
                                                      type: string
                                                    operator:
                                                      description: |-
                                                        operator represents a key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: |-
                                                        values is an array of string values. If the operator is In or NotIn,
                                                        the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                        the values array must be empty. This array is replaced during a strategic
                                                        merge patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                  - key
                                                  - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: |-
                                                  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions, whose key field is "key", the
                                                  operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          namespaces:
                                            description: |-
                                              namespaces specifies a static list of namespace names that the term applies to.
                                              The term is applied to the union of the namespaces listed in this field
                                              and the ones selected by namespaceSelector.
                                              null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: |-
                                              This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
                                              the labelSelector in the specified namespaces, where co-located is defined as running on a node
                                              whose value of the label with key topologyKey matches that of any node on which any of the
                                              selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                        - topologyKey
                                        type: object
                                      weight:
                                        description: |-
                                          weight associated with matching the corresponding podAffinityTerm,
                                          in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                    - podAffinityTerm
                                    - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: |-
                                    If the anti-affinity requirements specified by this field are not met at
                                    scheduling time, the pod will not be scheduled onto the node.
                                    If the anti-affinity requirements specified by this field cease to be met
                                    at some point during pod execution (e.g. due to a pod label update), the
                                    system may or may not try to eventually evict the pod from its node.
                                    When there are multiple elements, the lists of nodes corresponding to each
                                    podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: |-
                                      Defines a set of pods (namely those matching the labelSelector
                                      relative to the given namespace(s)) that this pod should be
                                      co-located (affinity) or not co-located (anti-affinity) with,
                                      where co-located is defined as running on a node whose value of
                                      the label with key <topologyKey> matches that of any node on which
                                      a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: |-
                                          A label query over a set of resources, in this case pods.
                                          If it's null, this PodAffinityTerm matches with no Pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: |-
                                                A label selector requirement is a selector that contains values, a key, and an operator that
                                                relates the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: |-
                                                    operator represents a key's relationship to a set of values.
                                                    Valid operators are In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: |-
                                                    values is an array of string values. If the operator is In or NotIn,
                                                    the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: |-
                                              matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions, whose key field is "key", the
                                              operator is "In", and the values array contains only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      matchLabelKeys:
                                        description: |-
                                          MatchLabelKeys is a set of pod label keys to select which pods will
                                          be taken into consideration. The keys are used to lookup values from the
                                          incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
                                          to select the group of existing pods which pods will be taken into consideration
                                          for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
                                          pod labels will be ignored. The default value is empty.
                                          The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
                                          Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
                                          This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      mismatchLabelKeys:
                                        description: |-
                                          MismatchLabelKeys is a set of pod label keys to select which pods will
                                          be taken into consideration. The keys are used to lookup values from the
                                          incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
                                          to select the group of existing pods which pods will be taken into consideration
                                          for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
                                          pod labels will be ignored. The default value is empty.
                                          The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
                                          Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
                                          This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      namespaceSelector:
                                        description: |-
                                          A label query over the set of namespaces that the term applies to.
                                          The term is applied to the union of the namespaces selected by this field
                                          and the ones listed in the namespaces field.
                                          null selector and null or empty namespaces list means "this pod's namespace".
                                          An empty selector ({}) matches all namespaces.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: |-
                                                A label selector requirement is a selector that contains values, a key, and an operator that
                                                relates the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: |-
                                                    operator represents a key's relationship to a set of values.
                                                    Valid operators are In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: |-
                                                    values is an array of string values. If the operator is In or NotIn,
                                                    the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: |-
                                              matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions, whose key field is "key", the
                                              operator is "In", and the values array contains only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaces:
                                        description: |-
                                          namespaces specifies a static list of namespace names that the term applies to.
                                          The term is applied to the union of the namespaces listed in this field
                                          and the ones selected by namespaceSelector.
                                          null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: |-
                                          This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
                                          the labelSelector in the specified namespaces, where co-located is defined as running on a node
                                          whose value of the label with key topologyKey matches that of any node on which any of the
                                          selected pods is running.
                                          Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                    - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        inplace:
                          properties:
                            selector:
                              properties:
                                labelSelector:
                                  description: |-
                                    A label selector is a label query over a set of resources. The result of matchLabels and
                                    matchExpressions are ANDed. An empty label selector matches all objects. A null
                                    label selector matches no objects.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: |-
                                          A label selector requirement is a selector that contains values, a key, and an operator that
                                          relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: |-
                                              operator represents a key's relationship to a set of values.
                                              Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: |-
                                              values is an array of string values. If the operator is In or NotIn,
                                              the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: |-
                                        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions, whose key field is "key", the
                                        operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                              type: object
                          type: object
                        replace:
                          properties:
                            selector:
                              properties:
                                labelSelector:
                                  description: |-
                                    A label selector is a label query over a set of resources. The result of matchLabels and
                                    matchExpressions are ANDed. An empty label selector matches all objects. A null
                                    label selector matches no objects.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: |-
                                          A label selector requirement is a selector that contains values, a key, and an operator that
                                          relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: |-
                                              operator represents a key's relationship to a set of values.
                                              Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: |-
                                              values is an array of string values. If the operator is In or NotIn,
                                              the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: |-
                                        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions, whose key field is "key", the
                                        operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                              type: object
                          type: object
                      type: object
                  required:
                  - name
                  - strategy
                  type: object
                maxItems: 128
                minItems: 1
                type: array
              shardings:
                items:
                  properties:
                    name:
                      maxLength: 15
                      pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                      type: string
                  required:
                  - name
                  type: object
                maxItems: 128
                minItems: 1
                type: array
            required:
            - clusterName
            type: object
          status:
            description: RolloutStatus defines the observed state of Rollout
            properties:
              components:
                description: Records the status information of all component within
                  the Rollout.
                items:
                  properties:
                    name:
                      type: string
                    replicas:
                      format: int32
                      type: integer
                  required:
                  - name
                  - replicas
                  type: object
                type: array
              conditions:
                description: Represents a list of detailed status of the Rollout object.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              message:
                description: Provides additional information about the phase.
                type: string
              observedGeneration:
                description: The most recent generation number of the Rollout object
                  that has been observed by the controller.
                format: int64
                type: integer
              phase:
                description: The current phase of the Rollout.
                enum:
                - Pending
                - Running
                - Succeed
                - Failed
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
